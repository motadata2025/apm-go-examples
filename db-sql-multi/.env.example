# =============================================================================
# Database Service Environment Configuration
# =============================================================================
# Copy this file to .env and customize for your environment

# =============================================================================
# Service Configuration
# =============================================================================

# HTTP Server Configuration
HTTP_HOST=0.0.0.0
HTTP_PORT=8081

# Service Name (for logging and monitoring)
SERVICE_NAME=db-sql-multi

# =============================================================================
# PostgreSQL Configuration
# =============================================================================

# Connection Details
PG_HOST=127.0.0.1
PG_PORT=5432
PG_USER=testuser
PG_PASSWORD=Test@1234
PG_DATABASE=testdb
PG_SSLMODE=disable

# Full DSN (Data Source Name) - will be constructed if not provided
# PG_DSN=postgres://testuser:Test%401234@127.0.0.1:5432/testdb?sslmode=disable

# Connection Pool Settings
PG_MAX_OPEN=10
PG_MAX_IDLE=5
PG_CONN_MAX_LIFETIME=30m

# =============================================================================
# MySQL Configuration
# =============================================================================

# Connection Details
MYSQL_HOST=127.0.0.1
MYSQL_PORT=3306
MYSQL_USER=root
MYSQL_PASSWORD=rootpass
MYSQL_DATABASE=testdb

# Full DSN (Data Source Name) - will be constructed if not provided
# MYSQL_DSN=root:rootpass@tcp(127.0.0.1:3306)/testdb?parseTime=true

# Connection Pool Settings
MYSQL_MAX_OPEN=10
MYSQL_MAX_IDLE=5
MYSQL_CONN_MAX_LIFETIME=30m

# =============================================================================
# Logging Configuration
# =============================================================================

# Log Level (DEBUG, INFO, WARN, ERROR)
LOG_LEVEL=INFO

# Log Format (json, text)
LOG_FORMAT=text

# Log Output (stdout, stderr, file)
LOG_OUTPUT=stdout

# Log File Path (if LOG_OUTPUT=file)
LOG_FILE=logs/db-sql-multi.log

# =============================================================================
# Health Check Configuration
# =============================================================================

# Health check timeout
HEALTH_CHECK_TIMEOUT=5s

# Database ping timeout
DB_PING_TIMEOUT=3s

# =============================================================================
# Development Configuration
# =============================================================================

# Development mode
DEV_MODE=true

# Enable debug logging
DEBUG=false

# Enable SQL query logging
SQL_DEBUG=false

# =============================================================================
# Production Configuration
# =============================================================================

# Production PostgreSQL (override above settings)
# PROD_PG_DSN=postgres://user:pass@prod-pg:5432/dbname?sslmode=require

# Production MySQL (override above settings)
# PROD_MYSQL_DSN=user:pass@tcp(prod-mysql:3306)/dbname?parseTime=true&tls=true

# Connection pool for production
# PROD_PG_MAX_OPEN=25
# PROD_PG_MAX_IDLE=10
# PROD_MYSQL_MAX_OPEN=25
# PROD_MYSQL_MAX_IDLE=10

# =============================================================================
# Monitoring Configuration
# =============================================================================

# Enable metrics collection
METRICS_ENABLED=true

# Metrics port
METRICS_PORT=9091

# Enable tracing
TRACING_ENABLED=false

# Tracing endpoint
TRACING_ENDPOINT=http://localhost:14268/api/traces

# =============================================================================
# Security Configuration
# =============================================================================

# Enable TLS for HTTP server
TLS_ENABLED=false

# TLS certificate file
TLS_CERT_FILE=/path/to/cert.pem

# TLS private key file
TLS_KEY_FILE=/path/to/key.pem

# API authentication (if needed)
API_KEY=your-api-key-here

# =============================================================================
# Database Setup Instructions
# =============================================================================

# PostgreSQL Setup:
# 1. Install PostgreSQL
# 2. Create user: CREATE USER testuser WITH PASSWORD 'Test@1234';
# 3. Create database: CREATE DATABASE testdb OWNER testuser;
# 4. Grant permissions: GRANT ALL PRIVILEGES ON DATABASE testdb TO testuser;

# MySQL Setup:
# 1. Install MySQL
# 2. Create database: CREATE DATABASE testdb;
# 3. Create user: CREATE USER 'testuser'@'localhost' IDENTIFIED BY 'Test@1234';
# 4. Grant permissions: GRANT ALL PRIVILEGES ON testdb.* TO 'testuser'@'localhost';

# Docker Setup (Alternative):
# PostgreSQL: docker run --name postgres -e POSTGRES_USER=testuser -e POSTGRES_PASSWORD=Test@1234 -e POSTGRES_DB=testdb -p 5432:5432 -d postgres:15
# MySQL: docker run --name mysql -e MYSQL_ROOT_PASSWORD=rootpass -e MYSQL_DATABASE=testdb -p 3306:3306 -d mysql:8

# =============================================================================
# Notes
# =============================================================================
# 1. Copy this file to .env and customize values
# 2. Ensure both PostgreSQL and MySQL are running before starting the service
# 3. The service will automatically create required tables on startup
# 4. Use strong passwords in production environments
# 5. Enable SSL/TLS for production database connections
