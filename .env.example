# =============================================================================
# APM Examples - Global Environment Configuration
# =============================================================================
# Copy this file to .env and customize for your environment
# Individual services may have their own .env files for service-specific config

# =============================================================================
# Service Ports
# =============================================================================
DB_SQL_PORT=8081
GRPC_PORT=50051
GRPC_HTTP_PORT=8083
HTTP_REST_PORT=8084
KAFKA_PRODUCER_PORT=8082

# =============================================================================
# Database Configuration (db-sql-multi service)
# =============================================================================

# PostgreSQL Configuration
PG_HOST=127.0.0.1
PG_PORT=5432
PG_USER=testuser
PG_PASSWORD=Test@1234
PG_DATABASE=testdb
PG_SSLMODE=disable
PG_DSN=postgres://${PG_USER}:${PG_PASSWORD}@${PG_HOST}:${PG_PORT}/${PG_DATABASE}?sslmode=${PG_SSLMODE}

# PostgreSQL Connection Pool
PG_MAX_OPEN=10
PG_MAX_IDLE=5

# MySQL Configuration
MYSQL_HOST=127.0.0.1
MYSQL_PORT=3306
MYSQL_USER=root
MYSQL_PASSWORD=rootpass
MYSQL_DATABASE=testdb
MYSQL_DSN=${MYSQL_USER}:${MYSQL_PASSWORD}@tcp(${MYSQL_HOST}:${MYSQL_PORT})/${MYSQL_DATABASE}?parseTime=true

# MySQL Connection Pool
MYSQL_MAX_OPEN=10
MYSQL_MAX_IDLE=5

# =============================================================================
# Kafka Configuration (kafka-segmentio service)
# =============================================================================

# Kafka Brokers (comma-separated for multiple brokers)
KAFKA_BROKERS=127.0.0.1:9092

# Kafka Topics
TOPIC_A=orders
TOPIC_B=payments

# Consumer Group
GROUP_ID=demo-consumers

# Kafka Docker Configuration
KAFKA_BROKER_ID=1
KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092
KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1

# Zookeeper Configuration
ZOOKEEPER_CLIENT_PORT=2181
ZOOKEEPER_TICK_TIME=2000

# =============================================================================
# gRPC Configuration (grpc-svc service)
# =============================================================================

# gRPC Server
GRPC_SERVER_HOST=0.0.0.0
GRPC_SERVER_PORT=50051

# gRPC Client
GRPC_CLIENT_HOST=127.0.0.1
GRPC_CLIENT_PORT=50051

# =============================================================================
# HTTP REST Configuration (http-rest service)
# =============================================================================

# HTTP Server
HTTP_HOST=0.0.0.0
HTTP_PORT=8084

# External Service URLs (for triggering other services)
DB_SERVICE_URL=http://localhost:8081
KAFKA_SERVICE_URL=http://localhost:8082
GRPC_CLIENT_URL=http://localhost:8083

# =============================================================================
# Logging Configuration
# =============================================================================

# Log Level (DEBUG, INFO, WARN, ERROR)
LOG_LEVEL=INFO

# Log Format (json, text)
LOG_FORMAT=text

# =============================================================================
# Build Configuration
# =============================================================================

# Application Version (auto-generated from git if not set)
VERSION=dev

# Build Environment (development, staging, production)
BUILD_ENV=development

# =============================================================================
# Monitoring & Observability
# =============================================================================

# Health Check Configuration
HEALTH_CHECK_TIMEOUT=5s
HEALTH_CHECK_INTERVAL=30s

# Metrics Configuration
METRICS_ENABLED=true
METRICS_PORT=9090

# Tracing Configuration
TRACING_ENABLED=false
TRACING_ENDPOINT=http://localhost:14268/api/traces

# =============================================================================
# Security Configuration
# =============================================================================

# TLS Configuration
TLS_ENABLED=false
TLS_CERT_FILE=/path/to/cert.pem
TLS_KEY_FILE=/path/to/key.pem

# API Keys (for external services)
API_KEY_SECRET=your-secret-api-key-here

# =============================================================================
# Development Configuration
# =============================================================================

# Development Mode
DEV_MODE=true

# Hot Reload
HOT_RELOAD=true

# Debug Mode
DEBUG=false

# =============================================================================
# Docker Configuration
# =============================================================================

# Docker Compose Project Name
COMPOSE_PROJECT_NAME=apm-examples

# Docker Network
DOCKER_NETWORK=apm-network

# =============================================================================
# Production Configuration
# =============================================================================

# Production Database URLs (override individual DB configs)
# DATABASE_URL=postgres://user:pass@prod-db:5432/dbname

# Production Kafka Brokers
# KAFKA_BROKERS=kafka1:9092,kafka2:9092,kafka3:9092

# Production Service Discovery
# SERVICE_DISCOVERY_URL=consul://localhost:8500

# Load Balancer Configuration
# LOAD_BALANCER_URL=http://lb.example.com

# =============================================================================
# Notes
# =============================================================================
# 1. Copy this file to .env and customize values for your environment
# 2. Never commit .env files to version control
# 3. Use strong passwords in production
# 4. Consider using secret management tools for production deployments
# 5. Individual services may override these values with their own .env files
