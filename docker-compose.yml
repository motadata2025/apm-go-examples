# =============================================================================
# APM Examples - Complete Infrastructure Docker Compose
# =============================================================================
# This file defines the complete infrastructure for the APM Examples project
# Usage: docker-compose up -d

version: '3.8'

networks:
  apm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  mysql_data:
  kafka_data:
  zookeeper_data:

services:
  # =============================================================================
  # Database Services
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: apm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: Test@1234
      POSTGRES_DB: testdb
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      apm-network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mysql:
    image: mysql:8.0
    container_name: apm-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: Test@1234
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/mysql-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      apm-network:
        ipv4_address: 172.20.0.11
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpass"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password

  # =============================================================================
  # Message Queue Services
  # =============================================================================

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: apm-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      apm-network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: apm-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      apm-network:
        ipv4_address: 172.20.0.21
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Application Services
  # =============================================================================

  db-sql-multi:
    build:
      context: ./db-sql-multi
      dockerfile: Dockerfile
    container_name: apm-db-sql-multi
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
    environment:
      - PG_DSN=postgres://testuser:Test@1234@postgres:5432/testdb?sslmode=disable
      - MYSQL_DSN=testuser:Test@1234@tcp(mysql:3306)/testdb?parseTime=true
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=8081
    ports:
      - "8081:8081"
    networks:
      apm-network:
        ipv4_address: 172.20.0.30
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  grpc-svc:
    build:
      context: ./grpc-svc
      dockerfile: Dockerfile
    container_name: apm-grpc-svc
    restart: unless-stopped
    environment:
      - GRPC_SERVER_HOST=0.0.0.0
      - GRPC_SERVER_PORT=50051
      - CLIENT_HTTP_HOST=0.0.0.0
      - CLIENT_HTTP_PORT=8083
    ports:
      - "50051:50051"
      - "8083:8083"
    networks:
      apm-network:
        ipv4_address: 172.20.0.31
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka-producer:
    build:
      context: ./kafka-segmentio
      dockerfile: Dockerfile.producer
    container_name: apm-kafka-producer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:29092
      - PRODUCER_HTTP_HOST=0.0.0.0
      - PRODUCER_HTTP_PORT=8082
    ports:
      - "8082:8082"
    networks:
      apm-network:
        ipv4_address: 172.20.0.32
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka-consumer:
    build:
      context: ./kafka-segmentio
      dockerfile: Dockerfile.consumer
    container_name: apm-kafka-consumer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:29092
      - GROUP_ID=docker-consumers
    networks:
      apm-network:
        ipv4_address: 172.20.0.33

  http-rest:
    build:
      context: ./http-rest
      dockerfile: Dockerfile
    container_name: apm-http-rest
    restart: unless-stopped
    depends_on:
      - db-sql-multi
      - kafka-producer
      - grpc-svc
    environment:
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=8084
      - DB_SERVICE_URL=http://db-sql-multi:8081
      - KAFKA_SERVICE_URL=http://kafka-producer:8082
      - GRPC_CLIENT_URL=http://grpc-svc:8083
    ports:
      - "8084:8084"
    networks:
      apm-network:
        ipv4_address: 172.20.0.34
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Monitoring Services (Optional)
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: apm-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      apm-network:
        ipv4_address: 172.20.0.40
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: apm-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    networks:
      apm-network:
        ipv4_address: 172.20.0.41
    profiles:
      - monitoring

  # =============================================================================
  # Development Tools (Optional)
  # =============================================================================

  adminer:
    image: adminer:latest
    container_name: apm-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      apm-network:
        ipv4_address: 172.20.0.50
    profiles:
      - tools

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: apm-kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    ports:
      - "8090:8080"
    networks:
      apm-network:
        ipv4_address: 172.20.0.51
    profiles:
      - tools
